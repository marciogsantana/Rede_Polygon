{"version":3,"sources":["img/logo.png","components/header/index.js","components/footer/index.js","components/fox/index.js","utils/pinata.js","utils/interact.js","pages/minter/index.js","App.js","reportWebVitals.js","index.js"],"names":["header","id","className","src","icon","onClick","e","preventDefault","window","open","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","href","Footer","Component","Fox","pxNotRatio","width","height","followMouse","slowDrift","containerRef","useRef","container","current","viewer","useMemo","makeFox","useEffect","lookAt","x","y","appendChild","stopAnimation","removeChild","ref","defaultProps","require","config","createAlchemyWeb3","process","FormData","Minter","useState","isConnected","walletAddress","releaseName","setReleaseName","artwork","artist","setArtist","a","connectWalletPressed","onMintPressed","artworkHandleChange","String","substring","role","htmlFor","required","onChange","disabled","event","target","value","placeholder","App","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.92b23b23.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.81e05768.png\";","import icon from \"../../img/logo.png\";\nimport \"./style.css\";\n\nconst header = () => {\n  return (\n    <div id=\"header\">\n      <nav className=\"navbar navbar-expand-lg navbar-dark\">\n        <div className=\"container\">\n          <img className=\"logo\" src={icon} />\n          <a\n            className=\"navbar-brand\"\n            onClick={(e) => {\n              e.preventDefault();\n              window.open(\"https://metadevs.com.br\", \"_self\");\n            }}\n          >\n            Metadevs Brasil 🇧🇷\n          </a>\n          <button\n            className=\"navbar-toggler\"\n            type=\"button\"\n            data-toggle=\"collapse\"\n            data-target=\"#navbarSupportedContent\"\n            aria-controls=\"navbarSupportedContent\"\n            aria-expanded=\"false\"\n            aria-label=\"Toggle navigation\"\n          >\n            <span className=\"navbar-toggler-icon\"></span>\n          </button>\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n            <ul className=\"navbar-nav me-auto\">\n              <li className=\"nav-item\">\n                <a className=\"nav-link\" href=\"/\"></a>\n              </li>\n\n              <li className=\"nav-item active\">\n                <a className=\"nav-link\" href=\"/\"></a>\n              </li>\n\n              <li className=\"nav-item\">\n                <a className=\"nav-link\" href=\"/\"></a>\n              </li>\n            </ul>\n            <span className=\"navbar-text float-right\">\n              <ul className=\"navbar-nav me-auto\">\n                <li className=\"nav-item\">\n                  <a\n                    className=\"nav-link\"\n                    onClick={(e) => {\n                      e.preventDefault();\n                      window.open(\n                        \"https://www.youtube.com/c/Kevencript\",\n                        \"_blank\"\n                      );\n                    }}\n                  >\n                    Youtube\n                  </a>\n                </li>\n                <li className=\"nav-item\">\n                  <a\n                    className=\"nav-link\"\n                    onClick={(e) => {\n                      e.preventDefault();\n                      window.open(\n                        \"https://www.instagram.com/metadevsbrasil/\",\n                        \"_self\"\n                      );\n                    }}\n                  >\n                    Instagram\n                  </a>\n                </li>\n\n                <li className=\"nav-item\">\n                  <a\n                    className=\"nav-link\"\n                    onClick={(e) => {\n                      e.preventDefault();\n                      window.open(\"https://metadevs.com.br\", \"_self\");\n                    }}\n                  >\n                    Sobre\n                  </a>\n                </li>\n              </ul>\n            </span>\n          </div>\n        </div>\n      </nav>\n    </div>\n  );\n};\n\nexport default header;\n","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"./style.css\";\n\nclass Footer extends Component {\n  // JSX stuff\n  render() {\n    return (\n      <section id=\"footer\">\n        <footer className=\"page-footer\">\n\n\n          {/* Copyright */}\n          <div className=\"footer-copyright text-center\">\n            <span className=\"\">Participe da Comunidade: www.metadevs.com.br </span>\n          </div>\n          {/* Copyright */}\n        </footer>\n      </section>\n    );\n  }\n}\n\nexport default Footer;","import { useRef, useEffect, useMemo } from \"react\";\nimport { bool, number, oneOfType, string } from \"prop-types\";\nimport makeFox from \"@metamask/logo\";\n\nconst Fox = ({ pxNotRatio, width, height, followMouse, slowDrift }) => {\n  const containerRef = useRef();\n  const { current: container } = containerRef;\n\n  const viewer = useMemo(\n    () => makeFox({ pxNotRatio, width, height, followMouse, slowDrift }),\n    [pxNotRatio, width, height, followMouse, slowDrift]\n  );\n\n  useEffect(() => {\n    if (!container) return;\n\n    viewer.lookAt({ x: 100, y: 100 });\n    container.appendChild(viewer.container);\n\n    return () => {\n      viewer.stopAnimation();\n      container.removeChild(viewer.container);\n    };\n  }, [container, viewer]);\n\n  return <div ref={containerRef} />;\n};\n\nFox.propTypes = {\n  pxNotRatio: bool,\n  width: oneOfType([number, string]),\n  height: oneOfType([number, string]),\n  followMouse: bool,\n  slowDrift: bool,\n};\n\nFox.defaultProps = {\n  pxNotRatio: true,\n  width: 500,\n  height: 400,\n  followMouse: false,\n  slowDrift: false,\n};\n\nexport default Fox;\n","require(\"dotenv\").config();\nconst key = process.env.REACT_APP_PINATA_KEY;\nconst secret = process.env.REACT_APP_PINATA_SECRET;\nconst bearer = process.env.REACT_APP_BEARER_KEY;\n\nconst axios = require(\"axios\");\n\n// Função para converter JSON em IPFS\nexport const pinJSONToIPFS = async (JSONBody) => {};\n\n// Função para transformar a imagem da Arte do Projeto em IPFS\nexport const pinIMAGEtoIPFS = async (imageBody) => {};\n","import MetadevsContract from \"../abis/MetadevsContract.json\";\nimport { pinJSONToIPFS } from \"./pinata.js\";\n\nrequire(\"dotenv\").config();\nconst alchemyKey = process.env.REACT_APP_ALCHEMY_KEY;\nconst { createAlchemyWeb3 } = require(\"@alch/alchemy-web3\");\nconst web3 = createAlchemyWeb3(alchemyKey);\n\n// Função para iniciar o contrato de acordo com a ABI\nexport const loadContract = async () => {};\n\n// Função para abrir a opção de conectar carteira na Metamask\nexport const connectWallet = async () => {};\n\n// Função para realizar o Mint de um NFTT a partir dos parâmetros\nexport const mintNFT = async (artist, artwork, name) => {};\n","import { useEffect, useState } from \"react\";\nimport Header from \"../../components/header\";\nimport Footer from \"../../components/footer\";\nimport Fox from \"../../components/fox\";\nimport \"./style.css\";\n\n// Import das funções utilitárias e de interação com o piñata\nimport { connectWallet, mintNFT } from \"../../utils/interact.js\";\nimport { pinIMAGEtoIPFS } from \"../../utils/pinata\";\n\nconst FormData = require(\"form-data\");\n\nconst Minter = () => {\n  // Variáveis de Estado da aplicação, erros\n  // e informações da carteira do usuário\n  const [isConnected, setConnectedStatus] = useState(false);\n  const [walletAddress, setWallet] = useState(\"\");\n  const [status, setStatus] = useState(\"\");\n  const [error, setError] = useState(null);\n  // Variáveis do Formulário\n  const [releaseName, setReleaseName] = useState(\"\");\n  const [artwork, setArtwork] = useState(\"\");\n  const [artist, setArtist] = useState(\"\");\n  // Tipos aceitáveis de Arte do Projeto\n  const types = [\"image/png\", \"image/jpeg\", \"image/jpg\", \"image/gif\"];\n\n  // Variável na qual iremos concentrar as informações do formulário\n  let data = new FormData();\n\n  // Função que é executada assim que o código é executado (ex: quando a página\n  // é aberta no navegador)\n  useEffect(async () => {});\n\n  // Função executada quando o usuário clica no botão \"conectar carteira\"\n  // Essa função irá chamar outra função utilitária (connectWallet) e irá\n  // definir o status e/ou endereço da carteira retornado (caso tudo ocorra bem)\n  const connectWalletPressed = async () => {};\n\n  // Função para quando o usuário for realizar o Mint\n  const onMintPressed = async () => {};\n\n  // Função executada quando o usuário seleciona uma imagem no formulários\n  const artworkHandleChange = async (e) => {};\n\n  return (\n    <div id=\"minter\">\n      <Header />\n      <br />\n      <br />\n      <br />\n      <br />\n\n      <div className=\"container-fluid\">\n        {/* TÍTULO  E SUBTITULO */}\n        <div className=\"row mt-4\">\n          <div className=\"col-md-2 col-sm-0\" />\n          <div className=\"col-md-4 col-sm-12 text-md-start text-sm-center  mt-2\">\n            <span className=\"fw-bolder title\">NFT</span>\n            <span className=\"title\"> Minter</span>\n            <br />\n            <span className=\"text-muted subtitle fw-light text-md-start text-sm-center\">\n              Realize o Mint do seu NFT!\n            </span>\n          </div>\n\n          {/* METAMASK FACE INTERATIVA */}\n          <div className=\"col-md-2 col-sm-12 text-center mt-3 mt-md-0\">\n            <div id=\"metamask-face\">\n              {/* <Fox followMouse width={100} height={100} /> */}\n            </div>\n          </div>\n\n          {/* BOTÃO CONECTAR CARTEIRA */}\n          <div className=\"col-md-4 col-sm-12 text-md-start tex-sm-center connect-wallet-div mt-4 mt-md-auto mb-md-auto mb-4\">\n            <span onClick={connectWalletPressed}>\n              {/* Botão de Conectar carteira\n              obs: caso o usuário estiver conectado iremos mostrar o endereço da carteira\n              caso contrário, a opção conectar carteira\n              */}\n              {isConnected ? (\n                <span className=\"wallet-button-connected\">\n                  {\"✅ Connected: \" +\n                    String(walletAddress).substring(0, 6) +\n                    \"...\" +\n                    String(walletAddress).substring(38)}\n                </span>\n              ) : (\n                <span className=\"wallet-button\">Conectar Carteira 👛</span>\n              )}\n            </span>\n          </div>\n          <div className=\"col-2\" />\n        </div>\n\n        {/* ALERTAS */}\n        {/* Alertas de Status */}\n\n        {/* {status ? (\n          <div className=\"row mb-4 mt-5 mt-md-4\">\n            <div className=\"col-12\">\n              <div className=\"alert alert-secondary\" role=\"alert\">\n                <span className=\"status\">{status}</span>\n              </div>\n            </div>\n          </div>\n        ) : null} */}\n        <div className=\"row mb-4 mt-5 mt-md-4\">\n          <div className=\"col-12\">\n            <div className=\"alert alert-secondary\" role=\"alert\">\n              <span className=\"status\">\n                Olá! Eu sou um exemplo de um alerta.\n              </span>\n            </div>\n          </div>\n        </div>\n\n        {/* Alertas de Erros */}\n\n        {/* {error ? (\n          <div className=\"row mb-4 mt-5 mt-md-4\">\n            <div className=\"col-12\">\n              <div className=\"alert alert-danger\" role=\"alert\">\n                <span className=\"status\">{error}</span>\n              </div>\n            </div>\n          </div>\n        ) : null} */}\n        <div className=\"row mb-4 mt-5 mt-md-4\">\n          <div className=\"col-12\">\n            <div className=\"alert alert-danger\" role=\"alert\">\n              <span className=\"status\">Olá! Eu sou um exemplo de um erro</span>\n            </div>\n          </div>\n        </div>\n\n        {/* CARD PRINCIPAL E FORMULÁRIO*/}\n        <div className=\"row\">\n          <div className=\"col-1 col-md-2\" />\n          <div className=\"col-10 col-md-8 form-card\">\n            <div className=\"row text-center\">\n              <div className=\"col-12 text-center\">\n                <span className=\"text-muted card-title fw-light \">\n                  Simplesmente adicione a imagem do seu NFT, título e artista e\n                  depois aperte em \"Mint\"\n                </span>\n              </div>\n            </div>\n\n            {/* Formulário */}\n            <div className=\"row mt-5\">\n              <form className=\"text-start\">\n                {/* Upload Arte do Projeto */}\n                <div className=\"row\">\n                  <div className=\"col-md-2 col-sm-1\" />\n\n                  <div className=\"col-md-8 col-sm-10\">\n                    <div className=\"mb-3\">\n                      <label htmlFor=\"artwork\" className=\"form-title\">\n                        Arte do Projeto {artwork ? <span>✅</span> : null}\n                      </label>\n\n                      {/* Caso o upload da Arte do Projeto \n                      já tenha sido concluída, iremos renderizar \n                      um preview da imagem no card */}\n                      {artwork ? (\n                        <span>\n                          <br />\n                          <img className=\"image-preview\" src={artwork} />\n                        </span>\n                      ) : null}\n\n                      <br />\n                      <span className=\"text-muted form-subtitle fw-light\">\n                        Suporta JPG, PNG e GIF. Tamanho máximo de arquivo: 10MB.\n                      </span>\n                      <br />\n\n                      {/* Link do IPFS Hash gerado */}\n                      {artwork ? (\n                        <span className=\"text-muted form-url-subtitle fw-light\">\n                          {artwork}\n                        </span>\n                      ) : null}\n\n                      {/* Input da Imagem\n                      obs: ela é desativada quando o link do \n                      IPFS Hash é gerado */}\n                      <input\n                        required\n                        className=\"form-control mt-1\"\n                        id=\"artwork\"\n                        onChange={artworkHandleChange}\n                        type=\"file\"\n                        disabled={artwork ? true : false}\n                      />\n                    </div>\n                  </div>\n\n                  <div className=\"col-md-2 col-sm-1\" />\n                </div>\n\n                {/* Nome do Projeto */}\n                <div className=\"row\">\n                  <div className=\"col-md-2 col-sm-1\" />\n\n                  <div className=\"col-md-8  col-sm-10\">\n                    <div className=\" mb-3\">\n                      <label htmlFor=\"release-name\" className=\"form-title\">\n                        Nome do Lançamento{\" \"}\n                        {releaseName ? <span>✅</span> : null}\n                      </label>\n                      <input\n                        type=\"text\"\n                        required\n                        onChange={(event) => setReleaseName(event.target.value)}\n                        className=\"form-control form-control-lg\"\n                        id=\"release-name\"\n                        placeholder=\"e.g. My first Audio NFT!\"\n                      />\n                    </div>\n                  </div>\n\n                  <div className=\"col-md-2 col-sm-1\" />\n                </div>\n\n                {/* Nome do Artista */}\n                <div className=\"row\">\n                  <div className=\"col-md-2 col-sm-1\" />\n\n                  <div className=\"col-md-8 col-sm-10\">\n                    <div className=\" mb-3\">\n                      <label htmlFor=\"artist-name\" className=\"form-title\">\n                        Nome do Artista {artist ? <span>✅</span> : null}\n                      </label>\n                      <input\n                        type=\"text\"\n                        required\n                        onChange={(event) => setArtist(event.target.value)}\n                        className=\"form-control form-control-lg\"\n                        id=\"artist-name\"\n                        placeholder=\"e.g. My first Audio NFT!\"\n                      />\n                    </div>\n                  </div>\n\n                  <div className=\"col-md-2 col-sm-1\" />\n                </div>\n\n                {/* BOTÃO DE MINT */}\n                <div className=\"row\">\n                  <div className=\"col-md-2 col-sm-1\" />\n\n                  <div className=\"col-md-8 col-sm-10\">\n                    {/* Caso todos os campos do formulário estiverem concluídos\n                    (link do IPFS gerado e carteira conectada) o botão\n                    será habilitado, caso contrário continua deshabilitado\n                    por padrão */}\n                    {isConnected && artwork && artist && releaseName ? (\n                      <span onClick={onMintPressed} className=\"btn btn-sm\">\n                        Mint NFT\n                      </span>\n                    ) : (\n                      <button className=\"btn btn-sm\" disabled>\n                        Mint (carteira MetaMask não conectada)\n                      </button>\n                    )}\n                  </div>\n\n                  <div className=\"col-md-2 col-sm-1\" />\n                </div>\n              </form>\n            </div>\n          </div>\n          <div className=\"col-1 col-md-2\" />\n        </div>\n      </div>\n\n      {/* FOOTER */}\n      <Footer />\n    </div>\n  );\n};\n\nexport default Minter;\n","import \"./App.css\";\nimport Minter from \"./pages/minter\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <main>\n        <Route exact path=\"/\" component={Minter} />\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\n\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}